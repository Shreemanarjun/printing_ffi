// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/printing_ffi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class PrintingFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PrintingFfiBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PrintingFfiBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  int sum(int a, int b) {
    return _sum(a, b);
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  int sum_long_running(int a, int b) {
    return _sum_long_running(a, b);
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
        'sum_long_running',
      );
  late final _sum_long_running = _sum_long_runningPtr
      .asFunction<int Function(int, int)>();

  bool list_printers(
    ffi.Pointer<ffi.Pointer<ffi.Char>> printer_list,
    ffi.Pointer<ffi.Int> count,
    ffi.Pointer<ffi.Uint32> printer_states,
  ) {
    return _list_printers(printer_list, count, printer_states);
  }

  late final _list_printersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Uint32>,
          )
        >
      >('list_printers');
  late final _list_printers = _list_printersPtr
      .asFunction<
        bool Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Uint32>,
        )
      >();

  bool raw_data_to_printer(
    ffi.Pointer<ffi.Char> printer_name,
    ffi.Pointer<ffi.Uint8> data,
    int length,
    ffi.Pointer<ffi.Char> doc_name,
  ) {
    return _raw_data_to_printer(printer_name, data, length, doc_name);
  }

  late final _raw_data_to_printerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Uint8>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('raw_data_to_printer');
  late final _raw_data_to_printer = _raw_data_to_printerPtr
      .asFunction<
        bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Char>,
        )
      >();

  bool list_print_jobs(
    ffi.Pointer<ffi.Char> printer_name,
    ffi.Pointer<ffi.Uint32> job_ids,
    ffi.Pointer<ffi.Pointer<ffi.Char>> job_titles,
    ffi.Pointer<ffi.Uint32> job_statuses,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _list_print_jobs(
      printer_name,
      job_ids,
      job_titles,
      job_statuses,
      count,
    );
  }

  late final _list_print_jobsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Uint32>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Uint32>,
            ffi.Pointer<ffi.Int>,
          )
        >
      >('list_print_jobs');
  late final _list_print_jobs = _list_print_jobsPtr
      .asFunction<
        bool Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<ffi.Int>,
        )
      >();

  bool pause_print_job(ffi.Pointer<ffi.Char> printer_name, int job_id) {
    return _pause_print_job(printer_name, job_id);
  }

  late final _pause_print_jobPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Uint32)>
      >('pause_print_job');
  late final _pause_print_job = _pause_print_jobPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool resume_print_job(ffi.Pointer<ffi.Char> printer_name, int job_id) {
    return _resume_print_job(printer_name, job_id);
  }

  late final _resume_print_jobPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Uint32)>
      >('resume_print_job');
  late final _resume_print_job = _resume_print_jobPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();

  bool cancel_print_job(ffi.Pointer<ffi.Char> printer_name, int job_id) {
    return _cancel_print_job(printer_name, job_id);
  }

  late final _cancel_print_jobPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Uint32)>
      >('cancel_print_job');
  late final _cancel_print_job = _cancel_print_jobPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Char>, int)>();
}
